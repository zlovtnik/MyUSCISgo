# Upstream configuration for load balancing (optional)
upstream app_backend {
    server localhost:3000;
    keepalive 32;
}

# HTTP to HTTPS redirect (disabled - HTTPS server disabled)
# server {
#     listen 80;
#     server_name _;
#     return 301 https://$host$request_uri;
# }

# HTTPS server configuration (disabled - SSL certificates not configured)
# server {
#     listen 443 ssl http2;
#     server_name localhost;
#
#     # SSL configuration (uncomment and configure for production)
#     # ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
#     # ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
#     # ssl_protocols TLSv1.2 TLSv1.3;
#     # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     # ssl_prefer_server_ciphers off;
#
#     root /usr/share/nginx/html;
#     index index.html;
#
#     # Security headers
#     add_header X-Content-Type-Options nosniff;
#     add_header X-Frame-Options DENY;
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Referrer-Policy "strict-origin-when-cross-origin";
#     add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
#
#     # CORS headers for WASM
#     add_header Cross-Origin-Embedder-Policy "require-corp";
#     add_header Cross-Origin-Opener-Policy "same-origin";
#
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # Enable gzip and brotli compression
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_types
#         application/wasm
#         application/javascript
#         application/json
#         application/xml
#         text/css
#         text/javascript
#         text/plain
#         text/xml
#         font/woff2
#         image/svg+xml;
#
#     # Brotli compression (if nginx supports it)
#     # brotli on;
#     # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
#
#     # Cache static assets aggressively
#     location ~* \.(wasm|js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#         add_header X-Robots-Tag "noindex, nofollow";
#         add_header Access-Control-Allow-Origin *;
#     }
#
#     # Cache HTML with shorter expiry
#     location ~* \.(html)$ {
#         expires 1h;
#         add_header Cache-Control "public, must-revalidate, proxy-revalidate";
#     }
#
#     # API proxy (uncomment if you have a backend API)
#     # location /api/ {
#     #     proxy_pass http://app_backend;
#     #     proxy_http_version 1.1;
#     #     proxy_set_header Upgrade $http_upgrade;
#     #     proxy_set_header Connection 'upgrade';
#     #     proxy_set_header Host $host;
#     #     proxy_set_header X-Real-IP $remote_addr;
#     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     #     proxy_set_header X-Forwarded-Proto $scheme;
#     #     proxy_cache_bypass $http_upgrade;
#     #     proxy_read_timeout 86400;
#     # }
#
#     # Health check endpoint
#     location /health {
#         access_log off;
#         return 200 "healthy\n";
#         add_header Content-Type text/plain;
#     }
# }
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Handle .well-known requests properly (return 404 instead of SPA)
    location /.well-known/ {
        return 404;
    }

    # Serve index.html for SPA routing
    location / {
        try_files $uri $uri/ /index.html;

        # Security: Don't serve dotfiles
        location ~ /\. {
            deny all;
        }
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}

# Include development server only in development environments
# Set NGINX_ENV=development to enable the dev server block
# The dev-server.conf file will be conditionally included by deployment scripts
include /etc/nginx/conf.d/dev-server*.conf;

# Production HTTPS server configuration (disabled - SSL certificates not configured)
# server {
#     listen 443 ssl http2;
#     server_name localhost;
#
#     # SSL configuration - UPDATE THESE PATHS FOR YOUR CERTIFICATES
#     ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
#     ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#
#     root /usr/share/nginx/html;
#     index index.html;
#
#     # Security headers
#     add_header X-Content-Type-Options nosniff;
#     add_header X-Frame-Options DENY;
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Referrer-Policy "strict-origin-when-cross-origin";
#     add_header Permissions-Policy "geolocation=(), microphone=(), camera=()";
#
#     # Content Security Policy (CSP)
#     add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests;" always;
#
#     # CORS headers for WASM
#     add_header Cross-Origin-Embedder-Policy "require-corp";
#     add_header Cross-Origin-Opener-Policy "same-origin";
#
#     # HSTS (HTTP Strict Transport Security)
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # Enable gzip and brotli compression
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_types
#         application/wasm
#         application/javascript
#         application/json
#         application/xml
#         text/css
#         text/javascript
#         text/plain
#         text/xml
#         font/woff2
#         image/svg+xml;
#
#     # Brotli compression (if nginx supports it)
#     # brotli on;
#     # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
#
#     # Cache static assets aggressively
#     location ~* \.(wasm|js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#         add_header X-Robots-Tag "noindex, nofollow";
#         add_header Access-Control-Allow-Origin *;
#     }
#
#     # Cache HTML with shorter expiry
#     location ~* \.(html)$ {
#         expires 1h;
#         add_header Cache-Control "public, must-revalidate, proxy-revalidate";
#     }
#
#     # API proxy (uncomment if you have a backend API)
#     # location /api/ {
#     #     proxy_pass http://app_backend;
#     #     proxy_http_version 1.1;
#     #     proxy_set_header Upgrade $http_upgrade;
#     #     proxy_set_header Connection 'upgrade';
#     #     proxy_set_header Host $host;
#     #     proxy_set_header X-Real-IP $remote_addr;
#     #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     #     proxy_set_header X-Forwarded-Proto $scheme;
#     #     proxy_cache_bypass $http_upgrade;
#     #     proxy_read_timeout 86400;
#     # }
#
#     # Health check endpoint
#     location /health {
#         access_log off;
#         return 200 "healthy\n";
#         add_header Content-Type text/plain;
#     }
#
#     # Serve index.html for SPA routing
#     location / {
#         try_files $uri $uri/ /index.html;
#
#         # Security: Don't serve dotfiles
#         location ~ /\. {
#             deny all;
#         }
#     }
#
#     # Error pages
#     error_page 404 /index.html;
#     error_page 500 502 503 504 /50x.html;
#
#     # Logs
#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log;
# }
